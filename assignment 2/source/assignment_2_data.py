# -*- coding: utf-8 -*-
"""assignment 2 data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VxT5dRbzp4P8fZJmmpfEum1o3wG4lGMK
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# Load the dataset
data_path = "/content/drive/MyDrive/datasheet/used car/train.csv"
df = pd.read_csv(data_path)

# Identify missing values
missing_values = df.isnull().sum()

# Impute or drop missing values
for column in df.columns:
    if df[column].dtype == 'object':
        df[column].fillna(df[column].mode()[0], inplace=True)  # Impute categorical variables with mode
    else:
        df[column].fillna(df[column].median(), inplace=True)  # Impute numerical variables with median

# Save the cleaned dataset
cleaned_data_path = "/content/drive/MyDrive/datasheet/used car/cleaned_data.csv"
df.to_csv(cleaned_data_path, index=False)

# Load the dataset
data_path = "/content/drive/MyDrive/datasheet/used car/cleaned_data.csv"
df = pd.read_csv(data_path)

# Remove units from attributes
df['Mileage'] = df['Mileage'].str.extract('(\d+.\d+)').astype(float)
df['Engine'] = df['Engine'].str.extract('(\d+)').astype(float)
df['Power'] = df['Power'].str.extract('(\d+)').astype(float)
df['New_Price'] = df['New_Price'].str.extract('(\d+.\d+)').astype(float)

# Convert numerical values to integers
df['Engine'] = df['Engine'].fillna(-1).astype(int)  # Fill NaN with a placeholder value (-1) before converting to int
df['Power'] = df['Power'].fillna(-1).astype(int)    # Fill NaN with a placeholder value (-1) before converting to int

# Save the modified dataset
df.to_csv('/content/drive/MyDrive/datasheet/used car/modified_data.csv', index=False)

# Load the dataset
data_path = "/content/drive/MyDrive/datasheet/used car/cleaned_data.csv"
df = pd.read_csv(data_path)

# Convert categorical variables to one-hot encoded numerical values
df = pd.get_dummies(df, columns=['Fuel_Type', 'Transmission'])

# Save the modified dataset
df.to_csv('/content/drive/MyDrive/datasheet/used car/modified_data1.csv', index=False)

from datetime import datetime

# Load the dataset
data_path = "/content/drive/MyDrive/datasheet/used car/modified_data1.csv"
df = pd.read_csv(data_path)

# Get the current year
current_year = datetime.now().year

# Calculate the current age of the car
df['Current_Age'] = current_year - df['Year']

# Calculate average price per seat
df['Average_Price_Per_Seat'] = df['Price'] / df['Seats']

# Save the modified dataset
df.to_csv('/content/drive/MyDrive/datasheet/used car/modified_data2.csv', index=False)

# Load the dataset
data_path = "/content/drive/MyDrive/datasheet/used car/cleaned_data.csv"
df = pd.read_csv(data_path, index_col=0)
df.reset_index(drop=True, inplace=True)

# 1. Select: Select specific columns
selected_df = df[['Name', 'Year', 'Mileage', 'Price']]

# 2. Filter: Filter rows based on certain conditions
filtered_df = df[df['Fuel_Type'] == 'Diesel']

# 3. Rename: Rename columns
renamed_df = df.rename(columns={'Odometer': 'Kilometers_Driven', 'New_Price': 'Price_When_New'})

# 4. Mutate: Create or modify columns
df['Engine_Displacement_CC'] = df['Engine'] * 1000  # Create a new column for engine displacement in CC

# Convert 'Mileage' column to numeric (float) data type
df['Mileage'] = df['Mileage'].str.extract('(\d+.\d+)').astype(float)

# 5. Arrange: Sort the rows based on one or more columns
sorted_df = df.sort_values(by='Price', ascending=False)

# 6. Summarize with group by: Aggregate data by groups and summarize it
summary_df = df.groupby('Year').agg({'Price': 'mean', 'Mileage': 'median'}).reset_index()

# Print the first few rows of each processed DataFrame
print("Selected columns:")
print(selected_df.head())
print("\nFiltered rows (Diesel cars only):")
print(filtered_df.head())
print("\nRenamed columns:")
print(renamed_df.head())
print("\nMutated DataFrame:")
print(df.head())
print("\nSorted DataFrame (descending order of Price):")
print(sorted_df.head())
print("\nSummary DataFrame (mean Price and median Mileage by Year):")
print(summary_df.head())

# Select specific rows and columns using df.loc
selected_rows = df.loc[[101, 4790, 33], ['Name', 'Year', 'Mileage', 'Price']]

# Filter rows based on a condition using df.loc
automatic_cars = df.loc[df['Transmission'] == 'Automatic']

# Rename columns using df.loc
df.loc[:, 'New_Name'] = df['Name'] + ' - ' + df['Year'].astype(str)

# Create or modify columns using df.loc
df.loc[:, 'Engine_Displacement_CC'] = df['Engine'] * 1000

# Sort rows based on a column using df.loc
sorted_df = df.loc[df['Year'].sort_values(ascending=False).index]

# Group by and aggregate using df.loc
summary_df = df.groupby('Year').agg({'Price': 'mean', 'Mileage': 'median'}).reset_index()

# Print the first few rows of each processed DataFrame
print("Selected rows and columns:")
print(selected_rows)
print("\nFiltered rows (Automatic Only):")
print(automatic_cars.head())
print("\nRenamed columns:")
print(df.head())
print("\nMutated DataFrame:")
print(df.head())
print("\nSorted DataFrame (descending order of Year):")
print(sorted_df.head())
print("\nSummary DataFrame (mean Price and median Mileage by Year):")
print(summary_df.head())
